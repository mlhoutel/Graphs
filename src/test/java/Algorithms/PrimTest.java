package Algorithms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import Graphs.AdjacencyList.DirectedGraph;
import Graphs.AdjacencyList.DirectedValuedGraph;
import Graphs.AdjacencyList.UndirectedValuedGraph;
import Graphs.Algorithms.Prim;
import Graphs.GraphAlgorithms.BinaryHeapEdge;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import Graphs.AdjacencyList.UndirectedGraph;
import Graphs.Algorithms.BFS;
import Graphs.GraphAlgorithms.GraphTools;
import Graphs.Nodes.UndirectedNode;

public class PrimTest {

    @Test
    void PrimUndirected() {
        //GIVEN
        int[][] mat = new int [][] {
                { 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1 },
                { 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1 },
                { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
                { 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0 },
                { 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1 },
                { 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1 },
                { 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0 },
                { 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1 },
                { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0 },
        };

        UndirectedGraph al = new UndirectedGraph(mat);

        //WHEN
        BinaryHeapEdge result = Prim.Prim(al);

        //THEN
        String expected = "<node-0,node-1,0>, <node-0,node-19,0>, <node-1,node-16,0>, <node-19,node-18,0>, <node-18,node-14,0>, <node-18,node-13,0>, <node-13,node-15,0>, <node-15,node-17,0>, <node-17,node-11,0>, <node-17,node-8,0>, <node-8,node-12,0>, <node-12,node-9,0>, <node-9,node-10,0>, <node-9,node-2,0>, <node-2,node-7,0>, <node-2,node-4,0>, <node-4,node-6,0>, <node-6,node-3,0>, <node-3,node-5,0>, ";
        Assertions.assertEquals(result.toString(), expected);
    }


    @Test
    void PrimUndirectedValued() {
        //GIVEN
        int[][] mat = new int [][] {
                { 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0 },
                { 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 5, 14, 15, 0, 7, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
                { 0, 0, 0, 2, 14, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 14, 9, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 9, 6 },
                { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 6, 9 },
                { 6, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 12, 0, 0, 0, 8, 11, 0, 11, 0, 11, 0, 0, 0, 1, 14, 0, 0 },
                { 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 3, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0 },
                { 15, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0 },
                { 0, 0, 0, 0, 14, 0, 0, 0, 0, 6, 0, 0, 12, 0, 7, 0, 6, 0, 0, 0 },
                { 12, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9 },
                { 0, 13, 0, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 12 },
                { 5, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 11, 6, 15, 0, 0, 9, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 11, 0, 0, 14 },
                { 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0 },
                { 7, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4, 8, 0, 0, 0, 0 },
        };

        UndirectedValuedGraph al = new UndirectedValuedGraph(mat);

        //WHEN
        BinaryHeapEdge result = Prim.Prim(al);

        //THEN
        String expected = "<node-0,node-7,1>, <node-0,node-16,1>, <node-16,node-5,1>, <node-16,node-8,1>, <node-3,node-18,1>, <node-1,node-4,2>, <node-1,node-11,2>, <node-0,node-10,4>, <node-10,node-3,1>, <node-0,node-1,4>, <node-5,node-12,5>, <node-18,node-6,6>, <node-5,node-19,6>, <node-12,node-14,7>, <node-14,node-15,6>, <node-10,node-2,7>, <node-1,node-13,8>, <node-11,node-9,8>, <node-4,node-17,9>, ";
        Assertions.assertEquals(result.toString(), expected);
    }


    @Test
    void PrimDirected() {
        //GIVEN
        int[][] mat = new int [][] {
                { 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1 },
                { 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1 },
                { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
                { 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0 },
                { 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1 },
                { 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1 },
                { 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0 },
                { 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1 },
                { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0 },
        };

        DirectedGraph al = new DirectedGraph(mat);

        //WHEN
        BinaryHeapEdge result = Prim.Prim(al);

        //THEN
        String expected = "<node-0,node-1,0>, <node-0,node-19,0>, <node-1,node-16,0>, <node-19,node-18,0>, <node-18,node-14,0>, <node-18,node-13,0>, <node-13,node-15,0>, <node-15,node-17,0>, <node-17,node-11,0>, <node-17,node-8,0>, <node-8,node-12,0>, <node-12,node-9,0>, <node-9,node-10,0>, <node-9,node-2,0>, <node-2,node-7,0>, <node-2,node-4,0>, <node-4,node-6,0>, <node-6,node-3,0>, <node-3,node-5,0>, ";
        Assertions.assertEquals(result.toString(), expected);
    }


    @Test
    void PrimDirectedValued() {
        //GIVEN
        int[][] mat = new int [][] {
                { 0, 4, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2 },
                { 0, 0, 8, 14, 7, 0, 0, 0, 5, 14, 0, 15, 0, 7, 0, 0, 4, 0, 0, 0 },
                { 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0 },
                { 14, 14, 9, 0, 0, 0, 0, 0, 5, 0, 1, 0, 9, 0, 6, 0, 0, 0, 5, 0 },
                { 15, 6, 9, 0, 0, 0, 6, 0, 9, 0, 0, 3, 0, 13, 0, 12, 8, 11, 11, 0 },
                { 0, 0, 0, 11, 0, 0, 1, 14, 0, 0, 0, 0, 15, 0, 8, 0, 3, 0, 13, 0 },
                { 0, 14, 0, 15, 0, 0, 0, 0, 4, 0, 10, 12, 0, 14, 0, 6, 0, 12, 0, 7 },
                { 6, 0, 0, 0, 0, 0, 12, 0, 15, 0, 0, 9, 13, 0, 0, 0, 9, 0, 0, 0 },
                { 0, 0, 0, 4, 6, 0, 0, 10, 0, 12, 0, 0, 0, 0, 5, 2, 10, 11, 0, 0 },
                { 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 15, 9, 0, 0, 0, 0, 8, 0, 11, 14 },
                { 0, 0, 0, 0, 3, 0, 0, 12, 4, 0, 0, 0, 0, 14, 0, 7, 0, 15, 15, 0 },
                { 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 0, 0 },
                { 14, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 0, 0, 15, 4, 0, 8, 0, 0, 8 },
                { 3, 0, 0, 13, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 10, 0, 0, 0, 0, 4 },
                { 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 15, 0, 0, 4, 0, 6, 0, 14 },
                { 13, 2, 1, 0, 6, 0, 12, 12, 0, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0 },
                { 0, 11, 0, 0, 10, 0, 11, 0, 0, 10, 0, 0, 0, 5, 0, 13, 0, 0, 0, 7 },
                { 2, 0, 0, 0, 2, 0, 0, 14, 0, 0, 0, 0, 0, 13, 0, 4, 0, 0, 0, 0 },
                { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 6 },
                { 0, 0, 0, 0, 12, 0, 2, 0, 0, 0, 0, 0, 15, 7, 5, 8, 0, 0, 12, 0 },
        };

        DirectedValuedGraph al = new DirectedValuedGraph(mat);

        //WHEN
        BinaryHeapEdge result = Prim.Prim(al);

        //THEN
        String expected = "<node-0,node-7,1>, <node-0,node-13,1>, <node-3,node-10,1>, <node-0,node-19,2>, <node-15,node-2,1>, <node-0,node-16,2>, <node-4,node-11,3>, <node-6,node-8,4>, <node-8,node-15,2>, <node-19,node-6,2>, <node-8,node-3,4>, <node-0,node-1,4>, <node-10,node-4,3>, <node-0,node-9,4>, <node-3,node-18,5>, <node-18,node-12,5>, <node-12,node-14,4>, <node-14,node-17,6>, ";
        Assertions.assertEquals(result.toString(), expected);
    }

}
